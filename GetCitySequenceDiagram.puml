@startuml GetCity Sequence Diagram
!theme plain
title GetCity API Endpoint - Sequence Diagram

actor Client
participant "CitiesController" as Controller
participant "TestServices" as TestSvc
participant "ICityInfoRepository" as Repository
participant "CityInfoRepository" as RepoImpl
participant "CityInfoContext" as DbContext
participant "SQLite Database" as DB
participant "IMapper" as Mapper
participant "AutoMapper" as MapperImpl

== Get City Request ==
Client -> Controller: GET /api/v{version}/cities/{id}?includePointsOfInterest=true
activate Controller

note over Controller: [Authorize] attribute check\nUser must be authenticated

Controller -> TestSvc: new TestServices()
activate TestSvc
Controller -> TestSvc: Test()
note over TestSvc: Execute test logic\n(from code line 54-55)
TestSvc --> Controller: void
deactivate TestSvc

Controller -> Repository: GetCityAsync(id, includePointsOfInterest)
activate Repository

Repository -> RepoImpl: GetCityAsync(id, includePointsOfInterest)
activate RepoImpl

alt includePointsOfInterest == true
    RepoImpl -> DbContext: Cities.Include(c => c.PointsOfInterest)\n.Where(c => c.Id == cityId)\n.FirstOrDefaultAsync()
    activate DbContext
    DbContext -> DB: SELECT * FROM Cities c\nLEFT JOIN PointsOfInterest poi ON c.Id = poi.CityId\nWHERE c.Id = {id}
    activate DB
    DB --> DbContext: City entity with PointsOfInterest collection
    deactivate DB
    DbContext --> RepoImpl: City entity
    deactivate DbContext
else includePointsOfInterest == false
    RepoImpl -> DbContext: Cities.Where(c => c.Id == cityId)\n.FirstOrDefaultAsync()
    activate DbContext
    DbContext -> DB: SELECT * FROM Cities WHERE Id = {id}
    activate DB
    DB --> DbContext: City entity (without PointsOfInterest)
    deactivate DB
    DbContext --> RepoImpl: City entity
    deactivate DbContext
end

RepoImpl --> Repository: City entity or null
deactivate RepoImpl
Repository --> Controller: City entity or null
deactivate Repository

alt city == null
    Controller --> Client: NotFound() - 404 HTTP Response
else city != null
    alt includePointsOfInterest == true
        Controller -> Mapper: Map<CityDto>(city)
        activate Mapper
        Mapper -> MapperImpl: Execute mapping configuration\nCity -> CityDto\nPointsOfInterest -> PointOfInterestDto[]
        activate MapperImpl
        MapperImpl --> Mapper: CityDto with PointsOfInterest
        deactivate MapperImpl
        Mapper --> Controller: CityDto
        deactivate Mapper
        Controller --> Client: Ok(CityDto) - 200 HTTP Response
    else includePointsOfInterest == false
        Controller -> Mapper: Map<CityWithoutPointsOfInterestDto>(city)
        activate Mapper
        Mapper -> MapperImpl: Execute mapping configuration\nCity -> CityWithoutPointsOfInterestDto
        activate MapperImpl
        MapperImpl --> Mapper: CityWithoutPointsOfInterestDto
        deactivate MapperImpl
        Mapper --> Controller: CityWithoutPointsOfInterestDto
        deactivate Mapper
        Controller --> Client: Ok(CityWithoutPointsOfInterestDto) - 200 HTTP Response
    end
end

deactivate Controller

== Code References ==
note over Controller
Based on CitiesController.cs:
- Line 48-66: GetCity method
- Line 54-55: TestServices instantiation and call
- Line 56: Repository call
- Line 57-59: Null check
- Line 61-66: Conditional mapping and return
end note

@enduml