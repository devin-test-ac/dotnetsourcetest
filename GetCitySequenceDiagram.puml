@startuml GetCity Sequence Diagram
!theme plain
title CityInfo API - GetCity Endpoint Sequence Diagram

actor "HTTP Client" as Client
participant "CitiesController" as Controller
participant "TestServices" as TestSvc
participant "ICityInfoRepository" as IRepo
participant "CityInfoRepository" as Repo
participant "CityInfoContext" as DbContext
participant "SQLite Database" as DB
participant "IMapper (AutoMapper)" as Mapper

== HTTP Request Processing ==
Client -> Controller: GET /api/v{version}/cities/{id}?includePointsOfInterest={bool}
activate Controller

note over Controller
**Authorization Check**
[Authorize] attribute validates JWT token
API versioning: v1.0 or v2.0 supported
end note

== Business Logic Execution ==
Controller -> TestSvc: **new TestServices()**
activate TestSvc
Controller -> TestSvc: **Test()**
note right of TestSvc: Dummy service call\n(Line 54-55 in code)
TestSvc --> Controller: void
deactivate TestSvc

== Data Retrieval ==
Controller -> IRepo: **GetCityAsync(id, includePointsOfInterest)**
activate IRepo

IRepo -> Repo: GetCityAsync(id, includePointsOfInterest)
activate Repo

alt **includePointsOfInterest == true**
    Repo -> DbContext: **Cities.Include(c => c.PointsOfInterest)**\n**.Where(c => c.Id == cityId)**\n**.FirstOrDefaultAsync()**
    activate DbContext

    DbContext -> DB: **SQL Query:**\nSELECT c.*, poi.*\nFROM Cities c\nLEFT JOIN PointsOfInterest poi ON c.Id = poi.CityId\nWHERE c.Id = @id
    activate DB

    DB --> DbContext: **City entity + PointsOfInterest collection**
    deactivate DB

    DbContext --> Repo: **City with PointsOfInterest**
    deactivate DbContext

else **includePointsOfInterest == false**
    Repo -> DbContext: **Cities.Where(c => c.Id == cityId)**\n**.FirstOrDefaultAsync()**
    activate DbContext

    DbContext -> DB: **SQL Query:**\nSELECT * FROM Cities\nWHERE Id = @id
    activate DB

    DB --> DbContext: **City entity only**
    deactivate DB

    DbContext --> Repo: **City without PointsOfInterest**
    deactivate DbContext
end

Repo --> IRepo: **City entity or null**
deactivate Repo
IRepo --> Controller: **City entity or null**
deactivate IRepo

== Response Generation ==
alt **city == null**
    Controller --> Client: **HTTP 404 NotFound()**
    note right: No city found with given ID
else **city != null**
    alt **includePointsOfInterest == true**
        Controller -> Mapper: **Map<CityDto>(city)**
        activate Mapper

        note over Mapper
        **AutoMapper Configuration:**
        City → CityDto
        PointsOfInterest → PointOfInterestDto[]
        Calculates NumberOfPointsOfInterest
        end note

        Mapper --> Controller: **CityDto with PointsOfInterest**
        deactivate Mapper

        Controller --> Client: **HTTP 200 OK(CityDto)**

    else **includePointsOfInterest == false**
        Controller -> Mapper: **Map<CityWithoutPointsOfInterestDto>(city)**
        activate Mapper

        note over Mapper
        **AutoMapper Configuration:**
        City → CityWithoutPointsOfInterestDto
        Maps: Id, Name, Description only
        end note

        Mapper --> Controller: **CityWithoutPointsOfInterestDto**
        deactivate Mapper

        Controller --> Client: **HTTP 200 OK(CityWithoutPointsOfInterestDto)**
    end
end

deactivate Controller

== Response Examples ==
note over Client
**Success with PointsOfInterest (200 OK):**
{
  "id": 1,
  "name": "New York City",
  "description": "The one with that big park.",
  "numberOfPointsOfInterest": 2,
  "pointsOfInterest": [
    {
      "id": 1,
      "name": "Central Park",
      "description": "The most visited urban park..."
    },
    {
      "id": 2,
      "name": "Empire State Building",
      "description": "A 102-story skyscraper..."
    }
  ]
}

**Success without PointsOfInterest (200 OK):**
{
  "id": 1,
  "name": "New York City",
  "description": "The one with that big park."
}

**Not Found (404):**
{
  "type": "https://tools.ietf.org/html/rfc7231#section-6.5.4",
  "title": "Not Found",
  "status": 404
}
end note

== Technical Details ==
note over Controller, DB
**Code Location:** CitiesController.cs (Lines 48-66)
**Route:** [Route("api/v{version:apiVersion}/cities")]
**Method:** [HttpGet("{id}")]
**Authorization:** [Authorize] - JWT token required
**API Versions:** 1.0, 2.0
**Database:** SQLite with Entity Framework Core
**ORM:** Entity Framework Core 6.0
**Mapping:** AutoMapper with custom profiles
end note

@enduml
